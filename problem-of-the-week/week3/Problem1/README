# 🧩 Word Search in 2D Matrix (Easy)

**Asked in Interviews at Microsoft**

## 📘 Problem Statement

You are given a 2D matrix of characters and a target word.  
Your task is to check whether the word exists in the matrix **either**:

- 🟦 Horizontally (Left to Right across rows)
- ⬇️ Vertically (Top to Bottom across columns)

> 🔍 No need for diagonal, reverse, or backtracking logic in this version.

---

## 🧾 Input Format

- A 2D matrix `M x N` of uppercase English letters.
- A string `word` representing the target sequence to search.

### 🧷 Constraints:
- `1 ≤ M, N ≤ 100`
- Word length ≤ `max(M, N)`
- Characters are **only uppercase English letters**

---

## ✅ Example

```python
matrix = [
  ['F', 'A', 'C', 'I'],
  ['O', 'B', 'Q', 'P'],
  ['A', 'N', 'O', 'B'],
  ['M', 'A', 'S', 'S']
]
